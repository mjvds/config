#!/bin/bash

export PATH="$PATH:~/.fzf/bin"
export FZF_DEFAULT_COMMAND='find -type d -name node_modules -prune -o -type f -print'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

export PATH=$PATH:~/.dotnet
export DOTNET_ROOT=~/.dotnet
export MSBuildSdksPath=$(echo ~/.dotnet/sdk/3*/Sdks)

export DOTNET_USE_POLLING_FILE_WATCHER=true

alias dotnet-install="curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --install-dir ~/.dotnet"
alias compile-omnisharp="./build.sh --target install --verbosity Verbose --use-global-dotnet-sdk --archive --install-path ~/.omnisharp/ --publish-all"

export npm_config_prefix=~/.node_modules
export PATH=$PATH:~/.node_modules/bin

alias nvim="nvim"
alias v="nvim" #  
alias vimconf="nvim ~/.config/nvim/init.vim"
alias ranger="ranger -r ~/.mark/config/ranger"

black='\033[0;30m'
red='\033[0;31m'
green='\033[0;32m'
orange='\033[0;33m'
blue='\033[0;34m'
purple='\033[0;35m'
cyan='\033[0;36m'
lightGray='\033[0;37m'
darkGray='\033[1;30m'
lightRed='\033[1;31m'
lightGreen='\033[1;32m'
yellow='\033[1;33m'
lightBlue='\033[1;34m'
lightPurple='\033[1;35m'
lightCyan='\033[1;36m'
white='\033[1;37m'
nc='\033[0;37m' # no color

parse_git_branch() {
  git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/[\1]/'
}

if [ $TERM != "linux" ]; then
  export PROMPT_DIRTRIM=2
  export PS1=" $nc┌─[$lightBlue\u$nc@$lightBlue\h$lightCyan \\$ \w$nc] $lightBlue\$(parse_git_branch)$nc \n"
  set -o vi
  bind '"jj":vi-movement-mode'
fi

# export FW_REPO_URL="https://cybermetrics.kilnhg.com/Code/AMDRepositories/Group/FaciliWorks-Lite.git"
export FW_TOKEN="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"
export FW_REPO_URL="https://marksantos002219:$FW_TOKEN@github.com/CybermetricsCorp/FaciliWorks-9.git"
# export WIN_DOC="/mnt/c/Users/rpdev/Documents"
# export FW_SITE_PATH="src/Web/CyberMetrics.FaciliWorks.NetCore.Site/wwwroot"

alias fwcd=". /home/$USER/.mark/bin/fw cd"
alias compile-nvim="make CMAKE_BUILD_TYPE=RelWithDebInfo && sudo make install"

where_file="/tmp/whereami"
export PROMPT_COMMAND="pwd > $where_file"
if test -f "$where_file"; then
  cd $(cat $where_file)
fi

export VISUAL=nvim
export EDITOR="$VISUAL"

# export CHROME_BIN=$(which chromium)

export PROJECT_TOKEN=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
export PROJECT_URL=https://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@github.com/mjvds/projects

# trash cli
alias rm="trash-put"

# add lua language server
export PATH="$PATH:/home/$USER/Documents/Compiled/lua-language-server/bin/Linux"

export ANDROID_HOME=/home/$USER/Android/Sdk
export PATH=$PATH:$ANDROID_HOME/tools
export PATH=$PATH:$ANDROID_HOME/tools/bin
export PATH=$PATH:$ANDROID_HOME/platform-tools
export ANDROID_SDK=$ANDROID_HOME
# include inputrc
bind -f  /home/$USER/.mark/dotfiles/.inputrc

export JAVA_HOME=/usr/lib/jvm/java-8-openjdk
export CAPACITOR_ANDROID_STUDIO_PATH=/opt/android-studio/bin/studio.sh

# execute vim/nvim command
# since we are using custom directory for our config files
export EXINIT="luafile /home/$USER/.mark/config/nvim/init.lua"
# add vim runtimepath
# export VIMRUNTIME=/usr/share/nvim/runtime
# export MYVIMRC=/home/$USER/.mark/config/nvim/init.lua
# export VIM=/home/$USER/.mark/config/nvim
# export XDG_CONFIG_HOME=/home/$USER/.mark/config
# export XDG_CONFIG_DIRS=/home/$USER/.config,/home/$USER/.mark/config

alias install-packer="git clone --depth 1 https://github.com/wbthomason/packer.nvim ~/.local/share/nvim/site/pack/packer/start/packer.nvim"

export PATH=$PATH:/home/$USER/.mark/bin

alias install-omnisharp="rm -rf ~/.mark/lsp/omnisharp && curl -L https://github.com/OmniSharp/omnisharp-roslyn/releases/download/v1.38.0/omnisharp-linux-x64.zip -o omnisharp.zip && unzip omnisharp -d ~/.mark/lsp/omnisharp && chmod +x ~/.mark/lsp/omnisharp/run"

export PGPORT=5434;

export CHROME_BIN=$(which chromium)

for conf in $(ls /home/$USER/.mark/lsp);
do
  export PATH="$PATH:/home/$USER/.mark/lsp/$conf"
done

export _JAVA_AWT_WM_NONREPARENTING=1

alias pac-orphans='pacman -Qtdq'
alias reflector-update='sudo reflector --sort rate --save /etc/pacman.d/mirrorlist --protocol https,http --latest 10 --verbose'

# export MONITOR2=$(xrandr |grep ' connected' |grep 'HDMI' |awk '{print $1}')
